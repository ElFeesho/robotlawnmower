#include "U8glib.h"
#include <NewPing.h>
#define SONAR_NUM     3 // Number of sensors.
#define MAX_DISTANCE 200 // Maximum distance (in cm) to ping.
#define PING_INTERVAL 33 // Milliseconds between sensor pings (29ms is about the min to avoid cross-sensor echo).

unsigned long pingTimer[SONAR_NUM]; // Holds the times when the next ping should happen for each sensor.
unsigned int cm[SONAR_NUM];         // Where the ping distances are stored.
uint8_t currentSensor = 0;          // Keeps track of which sensor is active.

//trig=26 echo=28  Right Sensor
//trig=22 echo=24  Left Sensor
//The others one is in the middle!

NewPing sonar[SONAR_NUM] = {     // Sensor object array.
  NewPing(8, 9, MAX_DISTANCE), // Each sensor's trigger pin, echo pin, and max distance to ping.
  NewPing(22, 24, MAX_DISTANCE),
  NewPing(26, 28, MAX_DISTANCE),
};     
//    #define TRIGGER_PIN  8
//    #define ECHO_PIN     9
//    #define MAX_DISTANCE 300
    // connect motor controller pins to Arduino digital pins
    // motor one
    int enA = 7;
    int in1 = 5;
    int in2 = 6;
    // motor two
    int enB = 2;
    int in3 = 3;
    int in4 = 4;
     
//    NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
    U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);  // VDD=5V GND=GND SCL=A5 SDA=A4

    void setup() {
      Serial.begin(115200);
     // set all the motor control pins to outputs
     pinMode(enA, OUTPUT);
     pinMode(enB, OUTPUT);
     pinMode(in1, OUTPUT);
     pinMode(in2, OUTPUT);
     pinMode(in3, OUTPUT);
     pinMode(in4, OUTPUT);
     pingTimer[0] = millis() + 75;           // First ping starts at 75ms, gives time for the Arduino to chill before starting.
     for (uint8_t i = 1; i < SONAR_NUM; i++) // Set the starting time for each sensor.
       pingTimer[i] = pingTimer[i - 1] + PING_INTERVAL;
     }

int a = 0;
int distance = 0;
int average_range = 0;
int avg_distance = 0;
char buf[9];
bool redraw = true;  //toggle screen redraw
int i = 0;
bool maxSpeedReached = false;

void softStart()
{
  // this function will run the motors across the range of possible speeds
  // note that maximum speed is determined by the motor itself and the operating voltage
  // the PWM values sent by analogWrite() are fractions of the maximum speed possible 
  // by your hardware
  // turn on motors
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);  
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH); 
  // accelerate from zero to maximum speed
  analogWrite(enA, i);
  analogWrite(enB, i);
  delay(5);
} 


void loop() {
  softStart();
  if (i>254) {
    maxSpeedReached = true;
    i = 254; 
    analogWrite(enA, i);
    analogWrite(enB, i);
  }
  
  if (redraw) {
     u8g.firstPage();   // Clear Display
     while(u8g.nextPage()){
     u8g.setFont(u8g_font_fub20);
     //distance = distance * 10;  //change to mm for Howi  //screws up display think its off the screen
     sprintf (buf, "%d", avg_distance);
     u8g.drawStr(0, 40, buf);      
     sprintf (buf, "cm");
     u8g.drawStr(0, 60, buf);         
     }
     redraw = false;  // clear flag to redraw
     if (avg_distance < 105) {    //Distance that slow mode is activated.
      maxSpeedReached = false;
      i = 20;  //todo  slow stop routine
      setMotorsReverse();
      i = 128;
      delay(1000);
      setMotorsForward(); 
     }
     avg_distance = 0;
     
  } 

  for (uint8_t i = 0; i < SONAR_NUM; i++) { // Loop through all the sensors.
    if (millis() >= pingTimer[i]) {         // Is it this sensor's time to ping?
      pingTimer[i] += PING_INTERVAL * SONAR_NUM;  // Set next time this sensor will be pinged.
      if (i == 0 && currentSensor == SONAR_NUM - 1) oneSensorCycle(); // Sensor ping cycle complete, do something with the results.
      sonar[currentSensor].timer_stop();          // Make sure previous timer is canceled before starting a new ping (insurance).
      currentSensor = i;                          // Sensor being accessed.
      cm[currentSensor] = 0;                      // Make distance zero in case there's no ping echo for this sensor.
      sonar[currentSensor].ping_timer(echoCheck); // Do the ping (processing continues, interrupt will call echoCheck to look for echo).
    }
  }

// old one sensor code below #######################
//  distance = sonar.ping_cm();  //  look for distance
// todo fix this,  just done to compile code as a test.
distance = cm[currentSensor];  // todo split this into all three sensors.

  if (distance < 1) {
    distance = 100;      // we did not see anything,   set distance to max.
  }
  //delay(5);
  average_range = average_range + distance;
  if (a>5) {
     avg_distance = average_range / 5;   //  Divide by amount of samples   
     a = 0;
     average_range = 0;
     redraw = true;
  }
  a=a+1;
  i=i+1;
}

void echoCheck() { // If ping received, set the sensor distance to array.
  if (sonar[currentSensor].check_timer())
    cm[currentSensor] = sonar[currentSensor].ping_result / US_ROUNDTRIP_CM;
}

void oneSensorCycle() { // Sensor ping cycle complete, do something with the results.
  // The following code would be replaced with your code that does something with the ping results.
  for (uint8_t i = 0; i < SONAR_NUM; i++) {
    Serial.print(i);
    Serial.print("=");
    Serial.print(cm[i]);
    Serial.print("cm ");
  }
  Serial.println();
}

void setMotorsForward() {
// turn on motors forward
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);  
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);   
  }
void setMotorsReverse() {
  // Set motors in reverse
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);  
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  }
